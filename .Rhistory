geom_point(shape = 21, colour = "white", size = 5, stroke = 5)+
geom_point()
ggplot(data = mpg,aes(displ,hwy, drv)) +
geom_point(mapping=aes(shape=21, colour=drv, size=5, stroke=3))
ggplot(data = mpg,aes(displ,hwy, drv)) +
geom_point(mapping=aes(shape=21,colour="white" size=5, stroke=3))
ggplot(data = mpg,aes(displ,hwy, drv)) +
geom_point(mapping=aes(shape=21,colour="white", size=5, stroke=3))
ggplot(data = mpg,aes(displ,hwy, drv)) +
geom_point(shape=21,colour="white", size=5, stroke=3)
ggplot(data = mpg,aes(displ,hwy,drv)) +
geom_point(shape=21,colour="white", size=5, stroke=3)
ggplot(mtcars, aes(wt, mpg, drv)) +
geom_point(shape = 21, size = 5, stroke = 5)+
geom_point()
ggplot(data = mpg,mapping= aes(x=displ,y=hwy,color = drv)) +
geom_point(shape=21,colour="white", size=5, stroke=3)
ggplot(data = mpg,mapping = aes(x=displ,y=hwy,color = drv)) +
geom_point(shape=21, size=5, stroke=3)
ggplot(data = mpg,mapping = aes(x=displ,y=hwy,fill = drv)) +
geom_point(shape=21, size=5, stroke=3)
ggplot(data = mpg,mapping = aes(x=displ,y=hwy,fill = drv)) +
geom_point(shape=21, size=5, colour = "white",stroke=3)
ggplot(data=diamonds)
library(tidyverse)
tidyverse_update()
ggplot(data=diamonds)
ggplot(data=diamonds)+
geom_bar(mapping = aes(x=cut))
ggplot(data= daimonds) +
stat_count(mapping(aes(x= cut)))
ggplot(data= diamonds) +
stat_count(mapping(aes(x= cut)))
ggplot(data=diamonds) +
geom_bar(mapping = aes(x= cut, y = stat(prob), group=1))
ggplot(data=diamonds) +
geom_bar(mapping = aes(x= cut, y = stat(prop), group=1))
ggplot(data=diamonds)+
geom_bar(mapping= aes(x= cut, y = depth),
fun.min = min,
fun.max = max,
fun = median)
ggplot(data=diamonds)+
stat_summary(mapping= aes(x= cut, y = depth),
fun.min = min,
fun.max = max,
fun = median)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = after_stat(prop)))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = after_stat(prop)))
ggplot(data-diamonds)  +
geom_bar(mapping = aes(x=cut, colour = cut))
ggplot(data = diamonds)  +
geom_bar(mapping = aes(x=cut, colour = cut))
ggplot(data= diamonds) +
geom_bar(mapping= aes(x=cut, fill= cut))
ggplot(data= diamonds)+
geom_bar(mapping = aes(x=cut, fill= clarity))
names(diamonds)
ggplot(data=diamionds, mapping= aes(x=cut, fill= clarity))+
geom_bar((alpha= 1/5, position= "identify"))
ggplot(data=diamionds, mapping= aes(x=cut, fill= clarity))+
geom_bar((alpha= 1/5, position= "identity"))
ggplot(data=diamionds, mapping= aes(x=cut, fill= clarity))+
geom_bar(alpha= 1/5, position= "identity")
ggplot(data=diamonds, mapping= aes(x=cut, fill= clarity))+
geom_bar(alpha= 1/5, position= "identity")
ggplot(data=diamonds, mapping=aes(x=cut, colour= clarity))+
geom_bar(fiul= NA, position="identity")
ggplot(data=diamonds, mapping=aes(x=cut, colour= clarity))+
geom_bar(fill= NA, position="identity")
ggplot(data=diamonds) +
geom_bar(mapping=aes(x=cut, fill = clarity), position = " fill")
ggplot(data=diamonds) +
geom_bar(mapping=aes(x=cut, fill = clarity), position = "fill")
ggplot(data= diamonds)+
geom_bar(mapping = aes(x = cut, fill=clarity), position = "dodge")
ggplot(data= mpg)+
geom_point(mapping = aes(x = displ, y = hwy), position = " jitter")
ggplot(data= mpg)+
geom_point(mapping = aes(x = displ, y = hwy), position = "jitter")
library(tidyverse)
tidyverse_update()
ggplot(data = mpg, mapoping = aes(x= class, y = hwy ))+
geom_boxplot()
ggplot(data = mpg, mapoping = aes(x= class, y = hwy ))+
geom_boxplot()
mpg <- ggplot2::mpg
ggplot(data = mpg, mapoping = aes(x= class, y = hwy ))+
geom_boxplot()
ggplot(data = mpg, mapping = aes(x= class, y = hwy ))+
geom_boxplot()
coord_flip()
# alterando os eixos do grafico
ggplot(data = mpg, mapping = aes(x=class, y=hwy))+
geom_boxplot()+
coord_flip()
nz <- map_data("nz")
ggplot(nz, aes(long, lat, group = group))+
geom_polygon(fill = "white", colour = "black")
ggplot(nz,aes(lomg, lat, group = group)) +
geom_polygon(fill= "white", colour = "black")+
coord_quickmap()
ggplot(nz,aes(long, lat, group = group)) +
geom_polygon(fill= "white", colour = "black")+
coord_quickmap()
bar <-  ggplot(data=diamonds) +
geom_bar(
mapping=aes(x=cut, fill= cut),
show.legend = FALSE,
width = 1
)+
theme(aspect.ratio = 1) +
labs(x = NULL, y= NULL)
bar + coord_flip()
bar + coord_polar()
library(nycflights13)
library(tidyverse)
filter(flights, month == 1, day ==1)
jan1 <- filter(flights, month==1, day==1)
# Dados de 25 de dezembro
dez25 <- filter(flights, month == 12, day == 25)
filter(fligths, month ==1 | month == 12)
filter(flights, month ==1 | month == 12)
tail(x)
sample(x)
# Agora vamos utilizar os operadores lógicos
rm(x)
filter(flights, month %in% c(11,12))
filter(flights, month ==11 | month == 12)
filter(flights, !(arr_delay > 120 | dep_delay > 120))
filter(flights, arr_delay <= 120, dep_delay <= 120)
install.packages("tidyverse")
library(tidyverse)
tidyverse_update()
library(nycflights13)
library(tidyverse)
NA > 5
10 == NA
NA + 10
NA/2
NA == NA
x == y
x <- NA
y <- NA
x == y
is.na(x)
is.na(y)
is.na(x) == is.na(y)
df <- tibble(x = c(1,NA,3))
filter(df, x>1)
filter(df,is.na(x) | x >1)
names(flights)
filter(flights,arr_delay == 2 | arr_delay >= 2 )
filter(flights, origin == IAH | origin = HOU )
filter(flights, origin == IAH | origin == HOU )
filter(flights, origin == "IAH" | origin =="HOU" )
flights.carrier
flights[carrier]
filter(flights, dest == "IAH" | dest =="HOU")
# 3 - Voos operados pela United, America ou Delta
filter(flights, carrier)
# 3 - Voos operados pela United, America ou Delta
select(flights, carrier)
view(flights)
filter(flights, carrirer == "UA"| carrier == " AA"| carrier == "DL")
filter(flights, carrier == "UA"| carrier == " AA"| carrier == "DL")
select(flights, month)
unique(select(flights, month))
filter(flights,month == 1 | month == 2 | month == 3 )
arrange(flights, year, month, day)
arrange(flights, desc(dep_delay))
arrange(flights, desc(year))
select(flights, year, month, day)
select(flights, year:day)
select(flights, -(year:day))
select(flights, -(year:monthy))
select(flights, -(year:month))
library(nycflights13)
library(tidyverse)
flights_small <- select(flights, year:dat, distance, air_time)
flights_small <- select(flights, year:day distance, air_time)
flights_small <- select(flights, year:day, distance, air_time)
# usando o mutate,
mutate(flights_small, gain = dep_delay, speed = distance/air_time *60)
names(flights_small)
# criando um dataset menor
flights_small <- select(flights, year:day,ends_with("delay"), distance, air_time)
# usando o mutate,
mutate(flights_small, gain = dep_delay, speed = distance/air_time *60)
names(flights_small)
# usando o mutate,
mutate(flights_small, gain = dep_delay, speed = distance/air_time *60)
names(flights_small)
# usando o mutate,
flights_small <- mutate(flights_small, gain = dep_delay, speed = distance/air_time *60)
names(flights_small)
# usando o mutate,
flights_small <- mutate(flights_small, gain = dep_delay- arr_delay, speed = distance/air_time *60)
names(flights_small)
flights_small <- mutate(flights_small, gain=dep_delay, hours= air_time/60,
gain_per_hour = gain/hours )
names(flights_small)
transmute(flights, gain= dep_delay - arr_delay,hours = air_time/60,
gain_per_hour = gain/hours)
y <-  c(1,2,2,NA,3,4)
min_rank(y)
min_rank(desc(y))
# As variações de min_rank()...
row_number(y)
dense_rank(y)
percent_rank(y)
cume_disty(y)
cume_dist(y)
summarise(flights, delay = mean(dep_delay, na.rm= TRUE))
by_day <- group_by(flights, year, month, day)
summarise(by_day, delay = mean(dep_delay, na.rm=T))
by_test <- group_by(flights, dest)
delay <- summarise(by_test,
count= n(),
dist = mean(distance, na.rm  = TRUE))
delay <- filter(delay, coun > 20, dest != "HNL")
delay <- filter(delay, count > 20, dest != "HNL")
ggplot(data=delay, mapping = aes(x=dist, y=delay))+
geom_point(aes(size =count), alpha =1/3) +
geom_smooth(se=F)
ggplot(data = delay, mapping = aes(x = dist, y = delay)) +
geom_point(aes(size = count), alpha = 1/3) +
geom_smooth(se = FALSE)
delay <- filter(delay, count > 20, dest != "HNL")
ggplot(data = delay, mapping = aes(x = dist, y = delay)) +
geom_point(aes(size = count), alpha = 1/3) +
geom_smooth(se = FALSE)
delays <- flights %>%
group_by(dest) %>%
summarise(
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = T)
) %>%
filter(count > 20, dest != "HNL")
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arrr_delay))
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled %>%
group_by(year,month,day) %>%
summarise(mean = mean(dep_delay))
delays <-  not_cancelled %>%
group_by(tailnum) %>%
summarise(delay = mean(arr_delay))
ggplot(data=delays, mapping = aes(x=delays))+
geom_freqpoly(binwidth = 10)
ggplot(data=delays, mapping = aes(x=delay))+
geom_freqpoly(binwidth = 10)
library(tidyverse)
tidyverse_update()
library(ggplot2)
smaller <-  diamonds %>%
filter(carat < 3)
ggplot(data = smaller, mapping = aes(x=carat))+
geom_histogram(binwidth = 0.1)
ggplot(data=smaller,mapping = aes(x= carat, colour = cut))+
geom_freqpoly(binwidth = 0.1)
ggplot(data=smaller, mapping = aes(x= carat))+
geom_histogram(binwidth = 0.01)
ggplot(data = faithful, mapping = aes(x =eruptions))+
geom_histogram(binwidth = 0.25)
ggplot(diamonds)+
geom_histogram(mapping = aes(x=y),binwidth =0.5)
ggplot(diamonds) +
geom_histogram(mapping = aes(x=y),binwidth = 0.5)+
coord_cartesian(ylim=c(0,0.5))
ggplot(diamonds) +
geom_histogram(mapping = aes(x=y),binwidth = 0.5)+
coord_cartesian(ylim=c(0,50))
ggplot(diamonds) +
geom_histogram(mapping = aes(x=y),binwidth = 0.5)+
coord_cartesian(ylim=c(0,50))
unusual <- diamonds %>%
filter(y < 3 | y > 20) %>%
select(price, x, y,z) %>%
arrange(y)
unusual
diamonds2 <- diamonds %>%
filter(between(y,3,20)
diamonds2 <- diamonds %>%
mutate(y = ifelse(y < 3 | y > 20,NA,y))
install.packages(c(
"gapminder","ggforce","gh", "globals", "openintro", "profvis",
"RSQLite", "shiny", "shinycssloaders", "shinyFeedback",
"shinythemes", "testthat","thematic", "tidyverse", "vroom",
"waiter", "xml2","zeallot"
))
# conferindo a versão do shiny
packageVersion("shiny")
library(shiny)
# Defina a interface do usuário
ui <- fluidPage(
"hello, world!"
)
runApp('aplicativos_shiny/app')
runApp('aplicativos_shiny/app')
"shinyapp"
runApp('aplicativos_shiny/app/app_2/app_2.R')
runApp('aplicativos_shiny/app/app_2/app_2.R')
library(shiny); runApp('aplicativos_shiny/ui_basica/ui_basica.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
library(dplyr)
municipios <- read_municipality()
View(municipios)
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
?selectizeInput
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
library(shiny); runApp('aplicativos_shiny/ui_basica/ui_basica.R')
runApp('aplicativos_shiny/ui_basica/ui_basica.R')
runApp('aplicativos_shiny/ui_basica/ui_basica.R')
runApp('aplicativos_shiny/ui_basica/ui_basica.R')
runApp('aplicativos_shiny/ui_basica/ui_basica.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
bslib::bs_theme_preview(theme)
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
library(shiny); runApp('aplicativos_shiny/ui_basica/ui_basica.R')
runApp('aplicativos_shiny/ui_basica/ui_basica.R')
runApp('aplicativos_shiny/ui_basica/ui_basica.R')
runApp('aplicativos_shiny/ui_basica/ui_basica.R')
sdcdfdf
wpg
wt
xc
runApp('aplicativos_shiny/ui_basica/ui_basica.R')
runApp('aplicativos_shiny/ui_basica/ui_basica.R')
runApp('aplicativos_shiny/ui_basica/ui_basica.R')
library(shiny); runApp('aplicativos_shiny/ui_basica/ui_basica.R')
runApp('aplicativos_shiny/ui_basica/ui_basica.R')
runApp('aplicativos_shiny/ui_basica/ui_basica.R')
runApp('aplicativos_shiny/ui_basica/ui_basica.R')
runApp('aplicativos_shiny/ui_basica/ui_basica.R')
runApp('aplicativos_shiny/ui_basica/ui_basica.R')
sales <- vroom::vroom("sales-dashboard/sales_data_sample.csv", col_types = list()), na ="")
sales <- vroom::vroom("sales-dashboard/sales_data_sample.csv", col_types = list(), na ="")
sales <- vroom::vroom("sales-dashboard/sales_data_sample.csv", col_types = list(), na ="")
sales <- vroom::vroom("sales-dashboard/sales_data_sample.csv", col_types = list(), na ="")
sales <- vroom::vroom("sales_data_sample.csv", col_types = list(), na ="")
View(sales)
runApp('sondagem_basegeo/web_sondagem.R')
runApp('daily.expenses/daily_expenses.R')
runApp('aplicativos_shiny/ui_basica/ui_basica.R')
sales <- vroom::vroom("sales_data_sample.csv", col_types = list(), na="")
sales %>%
select(TERRITORY, CUSTOMERNAME, ORDERNUMBER, everything()) %>%
arrange(ORDERNUMBER)
View(head(municipios))
View(head(estadoss))
View(head(estados))
View(head(estados))
estados <- read_state()
View(head(estados))
runApp('sondagem_basegeo/web_sondagem.R')
runApp('aplicativos_shiny/ui_basica/ui_basica.R')
runApp('aplicativos_shiny/ui_basica/ui_basica.R')
#   actionButton("simulate", "Simulate")
# )
#
# server <-  function(input, output, session){
#   observeEvent(input$n,{
#     label <- paste0("Simulate ",  input$n, " times")
#     updateActionButton(inputId = "simulate", label = label)
#   })
#
# }
rm(sales)
library(shiny); runApp('aplicativos_shiny/ui_basica/ui_basica.R')
#   actionButton("simulate", "Simulate")
# )
#
# server <-  function(input, output, session){
#   observeEvent(input$n,{
#     label <- paste0("Simulate ",  input$n, " times")
#     updateActionButton(inputId = "simulate", label = label)
#   })
#
# }
library(tidyverse)
tidyverse_update()
runApp('aplicativos_shiny/ui_basica/ui_basica.R')
runApp('ui_basica.R')
runApp('aplicativos_shiny/ui_basica/ui_basica.R')
runApp('ui_basica.R')
runApp('aplicativos_shiny/ui_basica/ui_basica.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
runApp('sondagem_basegeo/web_sondagem.R')
library(shiny); runApp('sondagem_basegeo/web_sondagem.R')
runApp('aplicativos_shiny/ui_basica/ui_basica.R')
runApp('aplicativos_shiny/ui_basica/ui_basica.R')
runApp('aplicativos_shiny/ui_basica/ui_basica.R')
library(googlesheets4)
library(tidyverse)
library(tibble)
## Autorizando o acesso ao google sheets
gs4_auth()
EntradaSalario <- read_sheet("https://docs.google.com/spreadsheets/d/1Qe6SBb3eSG3-LcdMQHU36XpPofNfxhNPYPN-0PBBrmQ/edit#gid=0")
View(EntradaSalario)
df1 <- data.frame(3555,"21-09-2022",2323,55444,"CDB")
sheet_append(EntradaSalario, df1)
saveData <- function(data){
data <- data %>% as.list() %>% data.frame()
sheet_append(SHEET_ID, data)
}
saveData <- function(data, SHEET_ID){
data <- data %>% as.list() %>% data.frame()
sheet_append(SHEET_ID, data)
}
saveData(df1,EntradaSalario )
EntradaSalario <- ("https://docs.google.com/spreadsheets/d/1Qe6SBb3eSG3-LcdMQHU36XpPofNfxhNPYPN-0PBBrmQ/edit#gid=0")
saveData(df1,EntradaSalario )
runApp('daily.expenses/daily_expenses.R')
library(shiny); runApp('daily.expenses/daily_expenses.R')
library(shiny); runApp('daily.expenses/daily_expenses.R')
library(shiny); runApp('daily.expenses/daily_expenses.R')
library(shiny); runApp('daily.expenses/daily_expenses.R')
library(shiny); runApp('daily.expenses/daily_expenses.R')
